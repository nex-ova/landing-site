{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/lightgallery@2.8.3/node_modules/src/lg-events.ts", "../../node_modules/.pnpm/lightgallery@2.8.3/node_modules/src/plugins/autoplay/lg-autoplay-settings.ts", "../../node_modules/.pnpm/lightgallery@2.8.3/node_modules/src/plugins/autoplay/lg-autoplay.ts"],
  "sourcesContent": ["import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n    rotateLeft: 'lgRotateLeft',\n    rotateRight: 'lgRotateRight',\n    flipHorizontal: 'lgFlipHorizontal',\n    flipVertical: 'lgFlipVertical',\n    autoplay: 'lgAutoplay',\n    autoplayStart: 'lgAutoplayStart',\n    autoplayStop: 'lgAutoplayStop',\n};\n\n// Follow the below format for the event documentation\n// @method is the method name when event is used with Angular/React components\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * For the first slide, lightGallery adds some delay for displaying the loaded slide item.\n     * This delay is required for the transition effect when the slide item is displayed\n     * Respect the delay when you use this event\n     */\n    delay: number;\n\n    // Will be true for the first slide\n    isFirstSlide: boolean;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the lightGallery container has been resized.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n}\n\n/**\n * Fired when the image is rotated in anticlockwise direction\n * @name lgRotateLeft\n * @method onRotateLeft\n */\nexport interface RotateLeftDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is rotated in clockwise direction\n * @name lgRotateRight\n * @method onRotateRight\n */\nexport interface RotateRightDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped horizontally\n * @name lgFlipHorizontal\n * @method onFlipHorizontal\n */\nexport interface FlipHorizontalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped vertically\n * @name lgFlipVertical\n * @method onFlipVertical\n */\nexport interface FlipVerticalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n", "export interface AutoplayStrings {\n    toggleAutoplay: string;\n}\n\nexport interface AutoplaySettings {\n    /**\n     * Enable autoplay plugin\n     */\n    autoplay: boolean;\n\n    /**\n     * Enable slideshow autoplay\n     */\n    slideShowAutoplay: boolean;\n\n    /**\n     * The time (in ms) between each auto transition.\n     */\n    slideShowInterval: number;\n\n    /**\n     * Show autoplay progressBar\n     */\n    progressBar: boolean;\n\n    /**\n     * If false autoplay will be stopped after first user action\n     */\n    forceSlideShowAutoplay: boolean;\n\n    /**\n     * Show/hide autoplay controls.\n     */\n    autoplayControls: boolean;\n\n    /**\n     * Specify where the autoplay controls should be appended.\n     */\n    appendAutoplayControlsTo: string;\n\n    /**\n     * Custom translation strings for aria-labels\n     */\n    autoplayPluginStrings: AutoplayStrings;\n}\nexport const autoplaySettings: AutoplaySettings = {\n    autoplay: true,\n    slideShowAutoplay: false,\n    slideShowInterval: 5000,\n    progressBar: true,\n    forceSlideShowAutoplay: false,\n    autoplayControls: true,\n    appendAutoplayControlsTo: '.lg-toolbar',\n    autoplayPluginStrings: {\n        toggleAutoplay: 'Toggle Autoplay',\n    } as AutoplayStrings,\n};\n", "import { lGEvents } from '../../lg-events';\nimport { LightGallery } from '../../lightgallery';\nimport { AutoplaySettings, autoplaySettings } from './lg-autoplay-settings';\n\n/**\n * Creates the autoplay plugin.\n * @param {object} element - lightGallery element\n */\nexport default class Autoplay {\n    core: LightGallery;\n    settings: AutoplaySettings;\n    interval!: any;\n    fromAuto!: boolean;\n    pausedOnTouchDrag!: boolean;\n    pausedOnSlideChange!: boolean;\n\n    constructor(instance: LightGallery) {\n        this.core = instance;\n\n        // extend module default settings with lightGallery core settings\n        this.settings = { ...autoplaySettings, ...this.core.settings };\n\n        return this;\n    }\n\n    public init(): void {\n        if (!this.settings.autoplay) {\n            return;\n        }\n\n        this.interval = false;\n\n        // Identify if slide happened from autoplay\n        this.fromAuto = true;\n\n        // Identify if autoplay canceled from touch/drag\n        this.pausedOnTouchDrag = false;\n\n        this.pausedOnSlideChange = false;\n\n        // append autoplay controls\n        if (this.settings.autoplayControls) {\n            this.controls();\n        }\n\n        // Create progress bar\n        if (this.settings.progressBar) {\n            this.core.outer.append(\n                '<div class=\"lg-progress-bar\"><div class=\"lg-progress\"></div></div>',\n            );\n        }\n\n        // Start autoplay\n        if (this.settings.slideShowAutoplay) {\n            this.core.LGel.once(`${lGEvents.slideItemLoad}.autoplay`, () => {\n                this.startAutoPlay();\n            });\n        }\n\n        // cancel interval on touchstart and dragstart\n        this.core.LGel.on(\n            `${lGEvents.dragStart}.autoplay touchstart.lg.autoplay`,\n            () => {\n                if (this.interval) {\n                    this.stopAutoPlay();\n                    this.pausedOnTouchDrag = true;\n                }\n            },\n        );\n\n        // restore autoplay if autoplay canceled from touchstart / dragstart\n        this.core.LGel.on(\n            `${lGEvents.dragEnd}.autoplay touchend.lg.autoplay`,\n            () => {\n                if (!this.interval && this.pausedOnTouchDrag) {\n                    this.startAutoPlay();\n                    this.pausedOnTouchDrag = false;\n                }\n            },\n        );\n\n        this.core.LGel.on(`${lGEvents.beforeSlide}.autoplay`, () => {\n            this.showProgressBar();\n            if (!this.fromAuto && this.interval) {\n                this.stopAutoPlay();\n                this.pausedOnSlideChange = true;\n            } else {\n                this.pausedOnSlideChange = false;\n            }\n            this.fromAuto = false;\n        });\n\n        // restore autoplay if autoplay canceled from touchstart / dragstart\n        this.core.LGel.on(`${lGEvents.afterSlide}.autoplay`, () => {\n            if (\n                this.pausedOnSlideChange &&\n                !this.interval &&\n                this.settings.forceSlideShowAutoplay\n            ) {\n                this.startAutoPlay();\n                this.pausedOnSlideChange = false;\n            }\n        });\n\n        // set progress\n        this.showProgressBar();\n    }\n\n    private showProgressBar() {\n        if (this.settings.progressBar && this.fromAuto) {\n            const _$progressBar = this.core.outer.find('.lg-progress-bar');\n            const _$progress = this.core.outer.find('.lg-progress');\n            if (this.interval) {\n                _$progress.removeAttr('style');\n                _$progressBar.removeClass('lg-start');\n                setTimeout(() => {\n                    _$progress.css(\n                        'transition',\n                        'width ' +\n                            (this.core.settings.speed +\n                                this.settings.slideShowInterval) +\n                            'ms ease 0s',\n                    );\n                    _$progressBar.addClass('lg-start');\n                }, 20);\n            }\n        }\n    }\n\n    // Manage autoplay via play/stop buttons\n    private controls() {\n        const _html = `<button aria-label=\"${this.settings.autoplayPluginStrings['toggleAutoplay']}\" type=\"button\" class=\"lg-autoplay-button lg-icon\"></button>`;\n\n        // Append autoplay controls\n        this.core.outer\n            .find(this.settings.appendAutoplayControlsTo)\n            .append(_html);\n\n        this.core.outer\n            .find('.lg-autoplay-button')\n            .first()\n            .on('click.lg.autoplay', () => {\n                if (this.core.outer.hasClass('lg-show-autoplay')) {\n                    this.stopAutoPlay();\n                } else {\n                    if (!this.interval) {\n                        this.startAutoPlay();\n                    }\n                }\n            });\n    }\n\n    // Autostart gallery\n    public startAutoPlay(): void {\n        this.core.outer\n            .find('.lg-progress')\n            .css(\n                'transition',\n                'width ' +\n                    (this.core.settings.speed +\n                        this.settings.slideShowInterval) +\n                    'ms ease 0s',\n            );\n        this.core.outer.addClass('lg-show-autoplay');\n        this.core.outer.find('.lg-progress-bar').addClass('lg-start');\n        this.core.LGel.trigger(lGEvents.autoplayStart, {\n            index: this.core.index,\n        });\n\n        this.interval = setInterval(() => {\n            if (this.core.index + 1 < this.core.galleryItems.length) {\n                this.core.index++;\n            } else {\n                this.core.index = 0;\n            }\n\n            this.core.LGel.trigger(lGEvents.autoplay, {\n                index: this.core.index,\n            });\n\n            this.fromAuto = true;\n            this.core.slide(this.core.index, false, false, 'next');\n        }, this.core.settings.speed + this.settings.slideShowInterval);\n    }\n\n    // cancel Autostart\n    public stopAutoPlay(): void {\n        if (this.interval) {\n            this.core.LGel.trigger(lGEvents.autoplayStop, {\n                index: this.core.index,\n            });\n            this.core.outer.find('.lg-progress').removeAttr('style');\n            this.core.outer.removeClass('lg-show-autoplay');\n            this.core.outer.find('.lg-progress-bar').removeClass('lg-start');\n        }\n        clearInterval(this.interval);\n        this.interval = false;\n    }\n\n    public closeGallery(): void {\n        this.stopAutoPlay();\n    }\n    public destroy(): void {\n        if (this.settings.autoplay) {\n            this.core.outer.find('.lg-progress-bar').remove();\n        }\n        // Remove all event listeners added by autoplay plugin\n        this.core.LGel.off('.lg.autoplay');\n        this.core.LGel.off('.autoplay');\n    }\n}\n"],
  "mappings": "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",
  "names": ["Autoplay"]
}
